# 英日・日英翻訳 Chrome 拡張 初期要件・設計ドラフト v0.1

## 0. 基本方針

* この文書は誰でも計画の進行に関わり，更新して良い．しかし，設計の根幹に関わる変更は必ず承認を得ること．

## 1. 目的と範囲

* 目的: 英→日 / 日→英の高品質翻訳をブラウザ内で完結させる。
* 範囲: 選択テキスト翻訳、ポップアップ UI での任意入力翻訳、ページ全体翻訳、結果のキャッシュ、ショートカット操作、LM Studio を用いたローカル推論。
* 非目標: Web 上の外部翻訳 API の常時利用、トラッキング、サーバー側集約。

## 2. ユースケース

1. 選択テキスト翻訳

   * ユーザーがページ上で文字列を選択すると、選択範囲の近傍に軽量フローティングボタン/アイコンを表示。
   * クリックで翻訳実行。翻訳結果を小型気泡やツールチップで表示。コピー・差し替え・再実行ボタンを提供。

2. ポップアップ翻訳

   * ツールバーの拡張アイコン → ポップアップを開き、入力欄に自由テキストを貼り付けて翻訳。
   * 言語ペア切替、温度・最大トークン、モデル選択、キャッシュ ON/OFF、全ページ翻訳の CTA を配置。

3. ページ全体翻訳

   * ページの Text ノードを走査し、バッチ分割して LM Studio に送信。
   * 返却後は DOM を置換。ユーザーが初めから翻訳済みであったかのように閲覧できる状態にする。
   * 原文とのトグル、進捗表示、差し戻しを提供。

4. キャッシュ

   * キー: `hash(lang_pair + normalized_text)`
   * 値: 翻訳結果、メタデータ(モデル、温度、作成時刻、ヒット数)
   * ポリシー: LRU + TTL、容量上限超過時は最終使用時刻の古いものから削除。

5. ショートカット

   * 例: Alt+T で選択範囲翻訳、Alt+Shift+T でページ全体翻訳。

## 3. 非機能要件

* レイテンシ: 選択翻訳 < 600ms(キャッシュヒット時)、< 2.5s(推論時) を目安。
* 信頼性: 失敗時の指数バックオフ、再試行は 2 回まで。
* プライバシー: 全処理をローカル実行。外部送信なし(設定で明示許可時を除く)。
* アクセシビリティ: キーボード操作完結。ARIA 属性付与。コントラスト 4.5:1 以上。

## 4. アーキテクチャ (MV3)

* コンテキスト

  * **Background(Service Worker)**: 翻訳ユースケースのオーケストレーション、LM Studio との通信、キャッシュ I/O、ショートカット、コンテキストメニュー。
  * **Content Script**: 選択検出、フローティング UI、DOM 置換、進捗表示、MutationObserver。
  * **Popup(UI)**: 入力、設定、履歴、全ページ翻訳トリガー。
  * **Options**: LM Studio baseURL/モデル/推論パラメータ、同時実行数、キャッシュ方針、許可ドメイン。
  * **Offscreen Document(必要時)**: DOM API が要る重処理や iframe 経由処理を隔離実行。runtime メッセージのみ使用。

* DDD 境界づけられたコンテキスト

  1. **Translate Core**

     * Entity: `TranslationRequest(id, segments[], langPair, params)`
     * Value Object: `LanguagePair{source, target}`, `TextSegment{id, text}`
     * Service: `Segmenter`, `Translator`(ポリシーでバッチ化)、`PostProcessor`(句読点・空白調整)
  2. **Cache**

     * Repository IF: `CacheRepository.get/set/evict/stats`
     * Adapter: `StorageLocalRepository`(storage.local/IndexedDB)、`MemoryShard`(session)
  3. **Integration**

     * `LMStudioClient`(OpenAI 互換 /v1/chat/completions)
     * `RetryPolicy`, `RateLimiter`
  4. **UI**

     * `PopupPresenter`, `ContentOverlayController`, `FullPageTranslator`

* ユビキタス言語

  * *Segment* = DOM の Text ノードから得た最小単位。*Batch* = 複数 Segment の送信単位。
  * *Replace Map* = Segment.id → NodeRef の写像。差し戻しに使用。

## 5. データモデル

* `cache_item`: { key, text, langPair, translated, meta{model, temp, ts, hit} }
* `job`: { id, tabId, type: 'selection'|'page', status, progress }

## 6. LM Studio 連携

* 設定: `baseUrl` 既定 `http://localhost:1234/v1`、`apiKey` 任意、`model` 必須。
* リクエスト: *chat.completions* を既定。system に翻訳スタイル指示、user に原文、tools 未使用。

## 7. DOM 置換アルゴリズム(ページ全体)

1. 走査: `TreeWalker(NodeFilter.SHOW_TEXT)` で Text ノード収集。`script/style/noscript/textarea/input` は除外。
2. 正規化: 連続空白の扱い、改行の保持、極短トークン(例: 1 文字)はスキップ可。
3. バッチ化: トークン長と上限に応じて分割。順序保持のためインデックス付与。
4. 置換: ノードごとに `data-xt-orig` へ原文退避し、`textContent` を翻訳に置換。
5. 動的変化: `MutationObserver` で追加ノードを拾いインクリメンタル翻訳。
6. 差し戻し: トグル操作で `data-xt-orig` を復元。

## 8. キャッシュ設計

* 階層: `storage.session`(短期) → `storage.local`(永続)。必要に応じ `unlimitedStorage`。
* 置換時はキャッシュを優先。ヒット率計測。LRU と TTL を併用。

## 9. マニフェスト指針(抜粋)

```json
{
  "manifest_version": 3,
  "name": "EN⇄JA Translator",
  "version": "0.1.0",
  "action": { "default_popup": "popup.html" },
  "permissions": ["storage","contextMenus"],
  "host_permissions": ["http://localhost:1234/*"],
  "commands": {
    "translate-selection": { "suggested_key": { "default": "Alt+T" } },
    "translate-page": { "suggested_key": { "default": "Alt+Shift+T" } }
  },
  "content_scripts": [
    { "matches": ["http://*/*", "https://*/*"], "js": ["content.js"], "run_at": "document_start" }
  ]
}
```

## 10. 代表的フロー

* **選択翻訳**: content が選択検知 → SW に `translateSelection` メッセージ → SW がキャッシュ参照 → 未ヒットなら LM Studio 呼び出し → 結果を content へ返却 → オーバーレイ表示。
* **全ページ翻訳**: popup から SW に `translatePage` → content が走査・分割 → SW がバッチ翻訳 → content が順次置換 → 進捗更新。

## 11. 例: LM Studio 呼び出し(概略)

```ts
async function translateBatch(texts: string[], pair: {src: string; dst: string}) {
  const body = {
    model: settings.model,
    messages: [
      { role: 'system', content: 'Translate strictly. Return exactly N segments separated by U+241E (␞). Do not add or remove segments. Preserve punctuation and newlines. No commentary.' },
      { role: 'user', content: texts.join('␞') }
    ],
    temperature: settings.temp ?? 0.2
  };
  const res = await fetch(`${settings.baseUrl}/chat/completions`, {
    method: 'POST', headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body)
  });
  const j = await res.json();
  return parse(j);
}
```

## 12. テスト戦略

* **単体**: Segmenter、キー生成、LRU、リトライポリシー。Vitest。
* **統合**: LM Studio スタブ(固定応答)でセパレータ復元の厳密一致を検証。
* **E2E**: Puppeteer + Chrome for Testing。

## 13. セキュリティとプライバシー

* 送受信は `http://localhost:1234` のみ。コンテンツスクリプトからの外部フェッチは禁止。LM Studio 通信は SW に集約。
* 個人データは保存しない。キャッシュはローカルに限定し、消去 UI と TTL を提供。

## 14. 既知のリスクと対策

* **CORS/ホスト許可**: MV3 では content からのクロスオリジンは不可。SW で実行し、`host_permissions` に localhost を付与。
* **SW ライフサイクル**: アイドル終了に備え、要求は冪等に。ジョブキューと再開処理を実装。
* **DOM 破綻**: 置換は Text ノード限定。属性値やスクリプトは変更しない。
* **容量制限**: 大量キャッシュ時は `unlimitedStorage` を利用可。設定で上限を可変化。

## 15. マイルストーン

* M1: ドメイン層 + LM Studio 呼び出し + ポップアップ最小実装
* M2: 選択翻訳 + オーバーレイ + キャッシュ
* M3: 全ページ翻訳 + 進捗 + 差し戻し
* M4: E2E(Headful) + QA + 公開準備

## 16. 次の合意事項

* モデル既定値、訳質ポリシー、UI 文言、許可ドメイン初期値を決定。
* LM Studio の `baseUrl`, `model` を Options に保存。セーフガードを入れる。
